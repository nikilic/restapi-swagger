# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Comment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, category_id: int=None, comment: str=None):  # noqa: E501
        """Comment - a model defined in Swagger

        :param id: The id of this Comment.  # noqa: E501
        :type id: int
        :param category_id: The category_id of this Comment.  # noqa: E501
        :type category_id: int
        :param comment: The comment of this Comment.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'id': int,
            'category_id': int,
            'comment': str
        }

        self.attribute_map = {
            'id': 'id',
            'category_id': 'category_id',
            'comment': 'comment'
        }

        self._id = id
        self._category_id = category_id
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Comment of this Comment.  # noqa: E501
        :rtype: Comment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Comment.


        :return: The id of this Comment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Comment.


        :param id: The id of this Comment.
        :type id: int
        """

        self._id = id

    @property
    def category_id(self) -> int:
        """Gets the category_id of this Comment.


        :return: The category_id of this Comment.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id: int):
        """Sets the category_id of this Comment.


        :param category_id: The category_id of this Comment.
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def comment(self) -> str:
        """Gets the comment of this Comment.


        :return: The comment of this Comment.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Comment.


        :param comment: The comment of this Comment.
        :type comment: str
        """

        self._comment = comment
